services:
  node-red:
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/Berlin
      - FLOWS=flows/flows.json
    ports:
      - "1880:1880"
    volumes:
      - node-red-data:/data
      - ./docker/node-red/data/flows:/data/flows
    networks:
      - backend-net

  emqx:
    image: emqx/emqx:latest
    container_name: emqx
    ports:
      - "1883:1883"   # MQTT port
      - "8083:8083"   # MQTT/WebSocket port
      - "8084:8084"   # MQTT/SSL port
      - "8883:8883"   # MQTT/SSL port
      - "18083:18083" # Dashboard port
    volumes:
      - emqx-data:/opt/emqx/data
    environment:
      EMQX_NAME: mqtt
      EMQX_DASHBOARD__DEFAULT_USERNAME: ${MQTT_USERNAME}
      EMQX_DASHBOARD__DEFAULT_PASSWORD: ${MQTT_PASSWORD}
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-net
    restart: unless-stopped

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend-net
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/pg/init-db/init.sh:/docker-entrypoint-initdb.d/init.sh
    environment:
      POSTGRES_FILE_DB: ${POSTGRES_FILE_DB}
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/pgsql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_AUTH}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - backend-net
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend-net
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    environment:
      - SMTP_AUTH_ENABLE=true
      - SMTP_AUTH_USERNAME=${VERIFICATION_EMAIL_USERNAME}
      - SMTP_AUTH_PASSWORD=${VERIFICATION_EMAIL_PASSWORD}
    networks:
      - backend-net
    restart: unless-stopped

  mock-sms:
    image: kennethreitz/httpbin:latest
    container_name: mock-sms
    ports:
      - "8888:80"
    networks:
      - backend-net
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9002:9000"    # MinIO API
      - "9001:9001"    # MinIO Console (Web UI)
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - backend-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mc", "alias", "set", "local", "http://localhost:9000", "${MINIO_ROOT_USER}", "${MINIO_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  backend-net:
    name: backend-network
    driver: bridge

volumes:
  emqx-data:
  influxdb-data:
  influxdb-config:
  node-red-data:
  postgres-data:
  redis-data:
  minio-data:
  pgadmin-data: