[
  {
    "id": "project-1",
    "title": "Party Finder",
    "description": "A regional event discovery platform for the Rhön Grabfeld area, built as a foundational web development project. Features a clean, responsive interface with integrated Google Maps functionality and event listings to help users discover local parties and gatherings.",
    "images": [
      "/reference/first/1.png",
      "/reference/first/2.png"
    ],
    "technologies": [
      "HTML",
      "CSS"
    ],
    "status": "completed",
    "startDate": "2022-06-17",
    "endDate": "2022-06-24",
    "githubUrl": "https://github.com/MEscape/party-finder",
    "galleryUrl": "/portfolio/gallery/project-1",
    "features": [
      "Responsive web design",
      "Google Maps integration",
      "Event listings with location and date information",
      "Social media integration",
      "Contact form functionality",
      "Regional focus on Rhön Grabfeld area"
    ]
  },
  {
    "id": "project-2",
    "title": "Responsive Navigation Bar",
    "description": "A modern, fully responsive navigation component built with pure CSS, focusing on flexbox layout principles and mobile-first design. Features a collapsible hamburger menu, dropdown functionality, and smooth responsive transitions across all device sizes.",
    "images": [
      "/reference/navbar/1.png",
      "/reference/navbar/2.png",
      "/reference/navbar/3.png"
    ],
    "technologies": [
      "HTML",
      "CSS",
      "CSS Flexbox",
      "CSS Grid",
      "Responsive Design"
    ],
    "status": "completed",
    "startDate": "2022-06-25",
    "endDate": "2022-07-08",
    "githubUrl": "https://github.com/MEscape/navbar",
    "galleryUrl": "/portfolio/gallery/project-2",
    "features": [
      "Mobile-first responsive design",
      "Hamburger menu with smooth animations",
      "Dropdown navigation with hover effects",
      "CSS-only interactive elements (no JavaScript)",
      "Flexible layout using CSS Flexbox",
      "Cross-browser compatible styling",
      "Custom CSS variables for theme consistency"
    ]
  },
  {
    "id": "project-3",
    "title": "Portfolio Template",
    "description": "A comprehensive portfolio website template featuring modern design principles, advanced CSS Grid layouts, and responsive breakpoints. Built as a learning project to understand full-scale website architecture, component-based design, and professional web presentation standards.",
    "images": [
      "/reference/generic-portfolio/1.png",
      "/reference/generic-portfolio/2.png",
      "/reference/generic-portfolio/3.png",
      "/reference/generic-portfolio/4.png",
      "/reference/generic-portfolio/5.png"
    ],
    "technologies": [
      "HTML",
      "CSS",
      "CSS Grid",
      "CSS Flexbox",
      "Google Fonts",
      "Responsive Design"
    ],
    "status": "completed",
    "startDate": "2022-07-15",
    "endDate": "2022-08-12",
    "githubUrl": "https://github.com/MEscape/test-portfolio",
    "galleryUrl": "/portfolio/gallery/project-3",
    "features": [
      "Multi-section layout with smooth scroll navigation",
      "Advanced CSS Grid implementation for complex layouts",
      "Professional card-based service presentation",
      "Responsive hamburger navigation system",
      "Custom CSS variables for consistent theming",
      "Mobile-first responsive design approach",
      "Social media integration layout",
      "Professional typography and spacing systems"
    ]
  },
  {
    "id": "project-4",
    "title": "Interactive Card Website",
    "description": "An immersive card-based website featuring advanced CSS animations, video backgrounds, and interactive hover effects. Built to explore CSS pseudo-classes, keyframe animations, and modern visual effects including animated RGB borders and smooth transform transitions.",
    "images": [
      "/reference/card/1.png",
      "/reference/card/2.png",
      "/reference/card/3.png"
    ],
    "technologies": [
      "HTML",
      "CSS",
      "CSS Animations",
      "CSS Keyframes",
      "CSS Transforms",
      "Responsive Design"
    ],
    "status": "completed",
    "startDate": "2022-08-20",
    "endDate": "2022-09-10",
    "githubUrl": "https://github.com/MEscape/card-website",
    "galleryUrl": "/portfolio/gallery/project-4",
    "features": [
      "Full-screen video background with responsive scaling",
      "Interactive card hover animations with smooth transitions",
      "Animated RGB border effects using CSS keyframes",
      "Progressive content reveal on hover interaction",
      "Custom gradient overlays and blur effects",
      "Responsive design with mobile-optimized interactions",
      "Advanced CSS pseudo-element animations"
    ]
  },
  {
    "id": "project-5",
    "title": "Vokabeltrainer (C++ / Qt)",
    "description": "Ein interaktiver Vokabeltrainer in C++ mit Qt, der lokales Lernen Deutsch ↔ Englisch ermöglicht. Die Anwendung unterstützt Import/Export von Vokabeln, unterschiedliche Trainingsmodi (mit oder ohne Zeitlimit) sowie persistente Lernalgorithmen basierend auf dem Karteikarten-System. Mit einer modernen, frameless Benutzeroberfläche, modularem MVC-Design und sicherer Konfigurationsverwaltung bietet das Projekt eine professionelle Lernplattform für Vokabeltraining sowohl offline als auch cloud-synchronisiert.",
    "images": [
      "/reference/voc-c/1.png",
      "/reference/voc-c/2.png",
      "/reference/voc-c/3.png",
      "/reference/voc-c/4.png",
      "/reference/voc-c/5.png",
      "/reference/voc-c/6.png",
      "/reference/voc-c/7.png"
    ],
    "technologies": [
      "C++",
      "Qt",
      "MVC Pattern",
      "Signal-Slot-System",
      "Google OAuth",
      "TXT Input/Output Streams"
    ],
    "status": "completed",
    "startDate": "2022-10-01",
    "endDate": "2023-03-31",
    "githubUrl": "https://github.com/MEscape/vocabeltrainer-c",
    "galleryUrl": "/portfolio/gallery/project-5",
    "features": [
      "Interaktives Deutsch ↔ Englisch Vokabeltraining",
      "Offline-Nutzung mit lokal gespeicherten Vokabeln",
      "Import/Export von Vokabeln per TXT und Google Drive Integration",
      "Verschiedene Trainingsmodi mit optionalem Zeitlimit",
      "Frameless, modernes Fensterdesign mit Drag & Drop Navigation",
      "Stacked Widget System für nahtlose Bereichswechsel",
      "Persistente Lernalgorithmen basierend auf Karteikarten-System",
      "Flexible Vokabelverwaltung mit Unit- und Ordnerstruktur",
      "Fortschrittsanzeige und visuelles Feedback",
      "Sichere Konfigurations- und Credential-Verwaltung",
      "Automatisiertes Build- und Deployment-System für Windows"
    ]
  },
  {
    "id": "project-6",
    "title": "Webserver Playground",
    "description": "Ein umfangreiches Full-Stack-Projekt mit Docker-basierter Infrastruktur, das mehrere Webanwendungen in einer modularen Umgebung vereint. Der Playground umfasst ein PHP/Apache-Backend mit MySQL-Datenbank, JWT-basierte Authentifizierung und ein selbst entwickeltes CSS-Framework. Neben klassischen CRUD-Systemen wurden interaktive Anwendungen wie ein 3D Rubik’s Cube, Snake Game und ein Speed-Dating-Generator umgesetzt. Das Projekt demonstriert moderne Webentwicklung mit Sicherheitskonzepten, Containerisierung und responsivem Design.",
    "images": [
      "/reference/playground/1.png",
      "/reference/playground/2.png",
      "/reference/playground/3.png",
      "/reference/playground/4.png",
      "/reference/playground/5.png",
      "/reference/playground/6.png",
      "/reference/playground/7.png",
      "/reference/playground/8.png",
      "/reference/playground/9.png",
      "/reference/playground/10.png",
      "/reference/playground/11.png"
    ],
    "technologies": [
      "PHP",
      "Apache Webserver",
      "MySQL",
      "Docker",
      "phpMyAdmin",
      "Composer",
      "Firebase JWT",
      "JavaScript",
      "Canvas API",
      "CSS"
    ],
    "status": "completed",
    "startDate": "2023-01-15",
    "endDate": "2023-07-31",
    "githubUrl": "https://github.com/MEscape/playground-test",
    "galleryUrl": "/portfolio/gallery/project-6",
    "features": [
      "Docker-basierte Multi-Container-Infrastruktur mit Apache, MySQL und phpMyAdmin",
      "JWT-Authentifizierung mit Rollen- und Session-Management",
      "Sicherheitsfeatures: Prepared Statements, Passwort-Hashing, Input Validation",
      "Selbst entwickeltes CSS-Framework 'Mestrap' mit Flexbox/Grid",
      "Speed-Dating Generator mit Excel/CSV-Upload und dynamischer Paarbildung",
      "Interaktiver 3D Rubik’s Cube Simulator mit CSS3 Transforms",
      "Canvas-basiertes Snake Game mit Highscore-System",
      "RSS Reader mit externen Feeds, CRUD-Operationen und Grid/List-Ansicht",
      "HTML Tags Referenz mit interaktiven Code-Beispielen",
      "Admin Panel mit vollständigem CRUD-System und Benutzerverwaltung",
      "CRUD Log System mit Formularvalidierung und Error Handling",
      "Responsives Design mit Media Queries und Custom Properties",
      "Relationale MySQL-Datenbank mit normalisierten Tabellen und referenzieller Integrität",
      "DevOps-Features: Docker Compose, Volume-Mapping, Network Isolation, Environment-Konfiguration",
      "Modulare Architektur mit strukturierter Code-Organisation"
    ]
  },
  {
    "id": "project-7",
    "title": "Real-Time Tournament Platform",
    "description": "Eine Full-Stack Multiplayer-Turnierplattform mit Echtzeit-Kommunikation für bis zu 16 Spieler. Das System kombiniert ein responsives Vanilla-JavaScript-Frontend mit einem Node.js/Express.js-Backend und einer SQLite-Datenbank. Mithilfe von WebSockets wurde eine performante Live-Synchronisation zwischen allen Clients ermöglicht, inklusive Lobby-System, Echtzeit-Scoring und automatischer Turnier-Logik. Durch modularen Aufbau, sichere Authentifizierung und event-driven Architektur demonstriert das Projekt umfassende Full-Stack-Entwicklungsfähigkeiten.",
    "images": [
      "/reference/tournament/1.png",
      "/reference/tournament/2.png",
      "/reference/tournament/3.png",
      "/reference/tournament/4.png",
      "/reference/tournament/5.png",
      "/reference/tournament/6.png",
      "/reference/tournament/7.png",
      "/reference/tournament/8.png"
    ],
    "technologies": [
      "JavaScript",
      "Node.js",
      "Express.js",
      "WebSocket",
      "SQLite",
      "REST API",
      "CSS Grid",
      "CSS Flexbox",
      "Git"
    ],
    "status": "completed",
    "startDate": "2023-04-01",
    "endDate": "2023-08-31",
    "githubUrl": "https://github.com/MEscape/turnierAPI",
    "galleryUrl": "/portfolio/gallery/project-7",
    "features": [
      "Echtzeit-Kommunikation über WebSockets",
      "Turnier-Bracket-System mit automatischer Rundenplanung",
      "Live-Synchronisation und Spieler-Tracking (Lobby-System)",
      "Dynamische Spieler-Paarung und Fortschrittsanzeige",
      "Admin Interface mit Live-Monitoring",
      "Token-basierte Authentifizierung und Session Management",
      "RESTful API für CRUD-Operationen",
      "Responsive UI mit Grid/Flexbox",
      "Audio/Video Integration für immersive Spielerfahrung",
      "Anti-Cheat Mechanismen und Input Validation",
      "Skalierbare, event-driven Architektur"
    ]
  },
  {
    "id": "project-8",
    "title": "Vokabeltrainer REST API",
    "description": "Ein vollständig selbst entwickeltes REST API-Backend für einen interaktiven Vokabeltrainer. Das Projekt zeigt tiefes Verständnis von PHP-Grundlagen und objektorientierter Architektur ohne Framework-Abhängigkeiten. Mit einem modularen Service-Layer, JWT-Authentifizierung, relationalem Datenbankdesign und einem intelligenten Empfehlungssystem demonstriert das Projekt professionelle Full-Stack-Entwicklungsfähigkeiten und modernes API-Design.",
    "technologies": [
      "PHP",
      "MySQL",
      "JWT",
      "Composer",
      "PHPUnit",
      "OpenAPI",
      "Git"
    ],
    "status": "completed",
    "startDate": "2023-09-01",
    "endDate": "2024-03-31",
    "githubUrl": "https://github.com/MEscape/php-voc-rest",
    "features": [
      "Benutzerverwaltung mit Rollen (Admin, Teacher, Pupil)",
      "JWT-Authentifizierung mit Token-Validierung",
      "Erstellung und Verwaltung von Vokabel-Einheiten",
      "Intelligentes Empfehlungssystem mit personalisierten Lernpfaden",
      "Verschiedene Testtypen und Fortschrittsverfolgung",
      "Soziale Features: Klassenraum, Nachrichten-System, Freundeslisten",
      "SQL-Injection-Schutz durch Prepared Statements",
      "Umfassende OpenAPI-Dokumentation (3000+ Zeilen)",
      "Eigene Routing-Engine ohne Framework",
      "Service-Layer-Architektur für lose Kopplung",
      "Mehrsprachige Architektur und flexible Datenbankabstraktion",
      "Unit- und API-Endpoint-Tests mit PHPUnit"
    ]
  },
  {
    "id": "project-9",
    "title": "MESIFY - Spotify Clone mit YouTube Integration",
    "description": "Eine vollständige Spotify-Alternative als React Native Mobile App, die YouTube als Audioquelle nutzt. Das Projekt kombiniert komplexes Web Scraping, Firebase-Integration und moderne Mobile-Entwicklung. Mit einem leistungsstarken Audio-Player, personalisierten Playlists und plattformübergreifender Synchronisation demonstriert MESIFY tiefes Verständnis von Mobile Development, API-Integration und Medienverarbeitung.",
    "images": [
      "/reference/mesify/1.png",
      "/reference/mesify/2.png",
      "/reference/mesify/3.png",
      "/reference/mesify/4.png",
      "/reference/mesify/5.png",
      "/reference/mesify/6.png",
      "/reference/mesify/7.png",
      "/reference/mesify/8.png"
    ],
    "technologies": [
      "React Native",
      "React",
      "TypeScript",
      "React Navigation",
      "React Context",
      "Custom Hooks",
      "Firebase Authentication",
      "Firebase Firestore",
      "Firebase Storage",
      "REST API",
      "Regex Parsing",
      "Jest",
      "ESLint",
      "Prettier",
      "Git"
    ],
    "status": "completed",
    "startDate": "2023-11-01",
    "endDate": "2024-05-31",
    "githubUrl": "https://github.com/MEscape/mesify",
    "galleryUrl": "/portfolio/gallery/project-9",
    "features": [
      "Vollständiger Audio-Player mit Shuffle, Repeat und Queue-Management",
      "Hintergrundwiedergabe mit react-native-track-player",
      "Web Scraping für YouTube-Audio ohne offizielle API",
      "Spotify API Integration für Playlists & Metadaten",
      "Benutzer-Accounts mit Firebase Authentication",
      "Liked Songs System mit Cloud-Synchronisation",
      "Offline-Nutzung mit AsyncStorage",
      "Custom Playlists mit CRUD-Operationen",
      "APK Auto-Update System für Android",
      "Gradient UI mit Spotify-ähnlichem Design",
      "Debounced Search mit Dual-System (YouTube + Google Fallback)",
      "Cross-Platform Deployment (iOS & Android)"
    ]
  },
  {
    "id": "project-10",
    "title": "Peer-to-Peer Netzwerk-Anwendung (sshdir)",
    "description": "Eine Java-basierte Peer-to-Peer Anwendung mit Client-Server-Architektur, die Remote-Dateizugriff und Dateiübertragung ermöglicht. Das Projekt wurde ohne externe Frameworks entwickelt, um Java-Grundlagen wie Socket-Programmierung, Multi-Threading und Clean Code Architektur zu vertiefen.",
    "technologies": [
      "Java SE",
      "Java NIO",
      "Java Streams API",
      "Java Concurrency",
      "Socket",
      "Data Streams",
      "Custom Binary Protocol",
      "Runnable & Handler Pattern",
      "Observer Pattern",
      "Git"
    ],
    "status": "completed",
    "startDate": "2023-11-01",
    "endDate": "2023-12-01",
    "githubUrl": "https://github.com/MEscape/ssh-dir",
    "features": [
      "TCP Socket-Verbindungen mit Multi-Client Support",
      "Bidirektionale Kommunikation mit Custom Protocol",
      "Remote File Browser mit Directory Navigation",
      "Asynchroner Datei-Download und Streaming File Transfer",
      "Cross-Platform Pfad-Normalisierung (Windows/Linux/macOS)",
      "Command-Line Interface mit ANSI-Farben",
      "Interactive Help System mit Live-Statusmeldungen",
      "Thread-Pool Management mit Executors.newCachedThreadPool",
      "Robustes Error Handling und Resource Management",
      "Zero-Dependency Ansatz (nur Java Standard Library)"
    ]
  },
  {
    "id": "project-11",
    "title": "HTTP-Webserver nach RFC-Standards",
    "description": "Ein von Grund auf entwickelter Java-Webserver, der vollständig RFC-7230 bis RFC-7235-konform ist. Das Projekt implementiert HTTP/1.1 nach Standard, unterstützt mehrere Methoden und Statuscodes, verfügt über ein dynamisches Routing-System und bietet eine sichere JWT-basierte Authentifizierung. Die Architektur basiert auf Multithreading, MVC-Pattern und einer sauberen Abstraktion für Datenbankzugriffe.",
    "technologies": [
      "Java",
      "Maven",
      "Socket Programming",
      "Jackson",
      "SLF4J",
      "MySQL",
      "JWT",
      "JUnit",
      "Mockito"
    ],
    "status": "completed",
    "startDate": "2024-01-01",
    "endDate": "2024-04-30",
    "githubUrl": "https://github.com/MEscape/java-webserver",
    "features": [
      "RFC-7230 bis RFC-7235 konforme HTTP/1.1-Implementation",
      "Multithreaded Server mit Connection-per-Thread-Architektur",
      "Thread-Pool-Management für Skalierbarkeit",
      "Unterstützung für GET, POST, PUT, PATCH, DELETE, HEAD",
      "Vollständige RFC-konforme Statuscode-Behandlung",
      "JWT-basierte Authentifizierung mit Rollen und Expiration",
      "Prepared Statements und Input-Validierung gegen SQL-Injection",
      "MySQL-Integration mit typisiertem Parameter-Binding",
      "Reflection-basiertes dynamisches Routing mit JSON-Konfiguration",
      "RESTful API-Design mit Versioning (/api/v1/)",
      "Konfigurierbares System mit JSON-basierten Einstellungen",
      "Robustes Error Handling mit Custom Exceptions",
      "Strukturiertes Logging mit SLF4J",
      "Unit Testing mit JUnit 5 und Mockito"
    ]
  },
  {
    "id": "project-12",
    "title": "REST API Vokabeltrainer (Spring Boot Migration)",
    "description": "Ein von PHP auf Java Spring Boot migrierter Vokabeltrainer mit moderner Microservice-Architektur, Test-Driven Development und Enterprise-Security. Das Projekt implementiert Benutzerverwaltung, Vokabel-Management, mehrsprachige Unterstützung und sichere JWT-basierte Authentifizierung. Mit Spring Boot 3.2.5, Spring Security 6 und JPA/Hibernate wurde ein skalierbares, wartbares und produktionsreifes System aufgebaut.",
    "technologies": [
      "Java",
      "Spring Boot",
      "Spring Security",
      "Spring Data JPA",
      "Hibernate ORM",
      "MySQL",
      "JWT",
      "BCrypt",
      "JUnit",
      "Spring Boot Test",
      "Maven",
      "Lombok",
      "Jackson",
      "SLF4J",
      "Git"
    ],
    "status": "completed",
    "startDate": "2024-05-01",
    "endDate": "2024-08-31",
    "githubUrl": "https://github.com/MEscape/java-voc-rest-spring-boot",
    "features": [
      "Benutzerregistrierung & Login mit JWT-basierter Authentifizierung",
      "Rollenbasierte Zugriffskontrolle (RBAC) mit granularen Berechtigungen",
      "Hierarchische Vokabel-Organisation (Units → Collections → Dictionaries)",
      "Schwierigkeitsgrade nach CEFR (A1–C2)",
      "Mehrsprachige Unterstützung durch Language-Entities",
      "RESTful API mit versionierten Endpoints (/v1/)",
      "Spring Security Integration mit Custom Authentication Filter",
      "BCrypt Passwort-Verschlüsselung",
      "Umfassende Input-Validierung (Bean Validation, DTOs)",
      "Custom Exception Handling mit strukturierten Fehlerantworten",
      "Statistik-Tracking für Lernfortschritt",
      "SSL/HTTPS Unterstützung und CORS-Integration",
      "Layered Architecture (Controller, Service, Repository, Entity)",
      "JUnit 5 + MockMvc Tests (TDD-Ansatz, hohe Testabdeckung)",
      "Logging-System mit konfigurierbaren Log-Levels",
      "Docker-Ready & CI/CD-fähig"
    ]
  },
  {
    "id": "project-13",
    "title": "WHIZ – Multiplayer Party Quiz App",
    "description": "Eine innovative React Native Cross-Platform App für Multiplayer-Partyspiele mit serverlosem Peer-to-Peer-Networking. Bis zu 16 Spieler können in Echtzeit Quiz- und Minispiele spielen. Das Projekt kombiniert moderne UI/UX, Echtzeit-Synchronisation, Gamification-Mechaniken und eine modulare, skalierbare Architektur.",
    "images": [
      "/reference/whiz/1.png",
      "/reference/whiz/2.png",
      "/reference/whiz/3.png",
      "/reference/whiz/4.png",
      "/reference/whiz/5.png",
      "/reference/whiz/6.png",
      "/reference/whiz/7.png",
      "/reference/whiz/8.png",
      "/reference/whiz/9.png",
      "/reference/whiz/10.png",
      "/reference/whiz/11.png",
      "/reference/whiz/12.png",
      "/reference/whiz/13.png",
      "/reference/whiz/14.png",
      "/reference/whiz/15.png"
    ],
    "technologies": [
      "React Native",
      "Expo",
      "TypeScript",
      "Expo Router",
      "MobX State Tree",
      "AsyncStorage",
      "NativeWind",
      "Lottie",
      "i18n",
      "react-native-tcp-socket",
      "Jest",
      "ESLint",
      "Prettier",
      "Sentry",
      "Git"
    ],
    "status": "in-progress",
    "startDate": "2024-09-01",
    "endDate": null,
    "githubUrl": "https://github.com/MEscape/whiz-app",
    "galleryUrl": "/portfolio/gallery/project-13",
    "features": [
      "Serverlose P2P-Multiplayer-Architektur mit TCP Sockets",
      "Echtzeit-Synchronisation für bis zu 16 Spieler",
      "Automatische Lobby-Verwaltung (Join/Leave, Codes, IP Discovery)",
      "4 Fragetypen: Multiple Choice, Schätzfragen, kreative Antworten, Challenges",
      "Mehrere Spielmodi (Classic Chaos, Survival, Drunk & Disorderly, Custom Collections)",
      "Gamification-System mit Ranking, Achievements, Level und Statistiken",
      "Custom Design System mit Dark/Light Mode und Lottie-Animationen",
      "Mehrsprachigkeit (Deutsch/Englisch, RTL vorbereitet)",
      "Persistente Speicherung mit AsyncStorage",
      "Push Notifications und Deep Linking",
      "Error Tracking mit Sentry",
      "Testing mit Jest und TypeScript Strict Mode"
    ]
  },
  {
    "id": "project-14",
    "title": "MindMesh – Vernetztes Wissen",
    "description": "MindMesh ist eine Full-Stack-Anwendung für vernetztes Wissensmanagement mit KI-Integration. Die Plattform kombiniert Django-Backend, React Native-Frontend und Google Generative AI, um Nutzern personalisierte Lernerfahrungen, intelligente Quizze und ein vernetztes Wissenssystem zu bieten.",
    "images": [
      "/reference/mind-mesh/1.png",
      "/reference/mind-mesh/2.png",
      "/reference/mind-mesh/3.png",
      "/reference/mind-mesh/4.png",
      "/reference/mind-mesh/5.png",
      "/reference/mind-mesh/6.png",
      "/reference/mind-mesh/7.png",
      "/reference/mind-mesh/8.png",
      "/reference/mind-mesh/9.png"
    ],
    "technologies": [
      "Django",
      "Django REST Framework",
      "Django Ninja",
      "PostgreSQL",
      "Django OAuth2",
      "JWT",
      "Gemini",
      "React Native",
      "Expo",
      "MobX State Tree",
      "React Navigation",
      "TypeScript",
      "i18n",
      "Axios",
      "React Native Reanimated",
      "Chart.js",
      "ESLint",
      "Prettier",
      "Husky",
      "Pytest",
      "Maestro",
      "Git",
      "Docker"
    ],
    "status": "completed",
    "startDate": "2024-10-01",
    "endDate": "2024-10-31",
    "githubUrl": "https://github.com/EinsPhoenix/Hackerton-Frontend",
    "galleryUrl": "/portfolio/gallery/project-14",
    "features": [
      "Thread- und Tag-System für Wissensorganisation",
      "KI-gestützte Inhaltsanalyse und Quiz-Generierung",
      "Personalisierte Empfehlungen basierend auf Nutzerpräferenzen",
      "Hierarchische Kommentare und Upvote-System",
      "Adaptive Bewertung und Fortschrittstracking",
      "Mehrsprachigkeit mit i18n-js",
      "OAuth2 Google Sign-In und JWT Authentication",
      "Cross-Platform App (iOS, Android, Web) mit React Native",
      "Saubere Backend-Architektur mit Django Ninja",
      "E2E-Testing mit Maestro und Unit-Tests mit Pytest/Jest"
    ]
  },
  {
    "id": "project-15",
    "title": "Die Macher – Industrie 4.0 Cyber-Physisches System",
    "description": "„Die Macher“ ist ein cyber-physisches Industrie 4.0-System mit einem vollständigen Pick-and-Place-Setup, Farberkennung und Echtzeit-Datenverarbeitung. Es kombiniert Raspberry Pi Sensorik, Java Spring Boot für Robotersteuerung und Datenkoordination, Dockerisierte Microservices mit InfluxDB/MQTT/Node-RED sowie ein modernes Next.js-Frontend für Live-Dashboards.",
    "images": [
      "/reference/smart-factory/1.png",
      "/reference/smart-factory/2.png",
      "/reference/smart-factory/3.png",
      "/reference/smart-factory/4.png",
      "/reference/smart-factory/5.png",
      "/reference/smart-factory/6.png",
      "/reference/smart-factory/7.png",
      "/reference/smart-factory/8.png",
      "/reference/smart-factory/9.png",
      "/reference/smart-factory/10.png",
      "/reference/smart-factory/11.png"
    ],
    "technologies": [
      "Python",
      "Java",
      "Spring Integration",
      "Maven",
      "OPC UA",
      "MQTT",
      "TCP/IP Custom Protocol",
      "REST API",
      "WebSocket",
      "InfluxDB",
      "PostgreSQL",
      "Node-RED",
      "Next.js",
      "React",
      "TypeScript",
      "Tailwind",
      "Shadcn UI",
      "Redux",
      "GitHub Actions",
      "SonarQube",
      "jSerialComm",
      "SLF4J",
      "Git",
      "Docker"
    ],
    "status": "completed",
    "startDate": "2024-11-01",
    "endDate": "2025-04-10",
    "githubUrl": "https://github.com/MEscape/die-macher",
    "galleryUrl": "/portfolio/gallery/project-15",
    "features": [
      "Pick-and-Place-System mit Dobot Roboter und Farberkennung",
      "Echtzeit-Sensorik (Temperatur, Feuchtigkeit, Farbe)",
      "Energieverbrauchs- und Kostenberechnung pro Bauteil (awattar API)",
      "OPC UA-gesicherte Kommunikation zwischen Raspberry Pi und Java Backend",
      "MQTT-basierte Echtzeit-Datenverteilung (EMQX Broker)",
      "InfluxDB für Zeitreihenproduktion & PostgreSQL für relationale Datenhaltung",
      "Node-RED für Workflow-Automatisierung",
      "Next.js Frontend mit Live-Dashboards und Recharts-Visualisierungen",
      "TLS-verschlüsselte Kommunikation mit X.509-Zertifikaten",
      "Dockerisierte Multi-System Architektur mit CI/CD-Pipeline",
      "Custom TCP-Protokoll für Dobot-Steuerung",
      "Event-driven & asynchrone Datenverarbeitung",
      "Monitoring mit Health Checks und strukturiertem Logging"
    ]
  },
  {
    "id": "project-16",
    "title": "MotoSync – Connected Car Plattform",
    "description": "MotoSync ist eine moderne Connected-Car-Plattform ähnlich BMW ConnectedDrive, die Fahrzeuge über OBD2 mit einer Cloud-basierten IoT-Infrastruktur verbindet. Das System ermöglicht Echtzeit-Fahrzeugtelemetrie, Fernüberwachung und -steuerung über eine mobile App. Es kombiniert eine skalierbare Spring-Boot-Microservice-Architektur, sichere MQTT-Kommunikation und ein modernes React-Native-Frontend.",
    "technologies": [
      "Spring Boot",
      "Spring Security",
      "Spring Integration",
      "PostgreSQL",
      "InfluxDB",
      "Redis",
      "MQTT",
      "Node-RED",
      "Expo",
      "Redux",
      "React Navigation",
      "Expo Auth Session",
      "Expo SecureStore",
      "MinIO",
      "Prometheus",
      "MailHog",
      "Git",
      "Docker"
    ],
    "status": "in-progress",
    "startDate": "2025-04-01",
    "endDate": null,
    "features": [
      "OBD2-Integration für Fahrzeugdiagnostik und Telemetrie",
      "Echtzeit-MQTT-Kommunikation zwischen Fahrzeug und Cloud",
      "Telemetrie-Verarbeitung: Geschwindigkeit, Motortemperatur, Kraftstoffstand, RPM",
      "Device-Pairing-System mit Seriennummern und Pairing-Passwörtern",
      "Cross-Platform Mobile App (iOS/Android) mit React Native",
      "OAuth2-Authentifizierung und biometrisches Login",
      "Echtzeit-Dashboard für Fahrzeugdaten",
      "AES-verschlüsselte Datenübertragung",
      "Microservices mit Spring Boot und API-Gateway",
      "File-Server mit MinIO Storage",
      "InfluxDB für Telemetrie-Zeitreihen",
      "PostgreSQL für Benutzerdaten",
      "Redis für Caching/Sessions",
      "Docker-Containerisierung mit Compose",
      "Prometheus-Monitoring",
      "Security Features: Rate Limiting, Device Authentication, JWT, MQTT Validation"
    ]
  },
  {
    "id": "project-17",
    "title": "LGTM Monitoring Stack – Kubernetes Observability",
    "description": "Implementierung eines vollständigen LGTM (Loki, Grafana, Tempo, Mimir) Monitoring Stacks für Kubernetes-Umgebungen mit Fokus auf zentrale Log-Aggregation, Visualisierung und Sicherheit. Das Projekt bietet eine produktionsreife, skalierbare Lösung mit Kustomize und Helm Charts für effizientes DevOps-Monitoring.",
    "technologies": [
      "Kubernetes",
      "Helm",
      "Kustomize",
      "Grafana",
      "Loki",
      "Alloy",
      "MinIO",
      "Prometheus",
      "Cert-Manager",
      "Pod Security Standards",
      "RBAC"
    ],
    "status": "in-progress",
    "startDate": "2025-07-01",
    "endDate": null,
    "features": [
      "Zentrale Log-Aggregation für Kubernetes-Workloads",
      "Real-time Log-Streaming und strukturierte Metadaten",
      "Multi-Tenant Architektur mit Retention-Policies",
      "Distributed Loki mit TSDB-Schema v13 und Snappy-Komprimierung",
      "Grafana Dashboards mit Security-hardened Konfiguration",
      "Alloy Agent & Gateway Mode für Telemetrie-Erfassung",
      "S3-kompatibles Object Storage via MinIO mit KES-Verschlüsselung",
      "GitOps-ready Deployment mit Kustomize",
      "Helm Chart Management für LGTM Komponenten",
      "Security-by-Design: Non-root Execution, ReadOnly FS, Secret Management",
      "TLS/Cert-Manager Integration für verschlüsselte Kommunikation",
      "Alerting & Monitoring via Grafana Alert Manager"
    ]
  }
]